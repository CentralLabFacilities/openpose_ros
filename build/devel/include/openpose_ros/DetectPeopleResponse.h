// Generated by gencpp from file openpose_ros/DetectPeopleResponse.msg
// DO NOT EDIT!


#ifndef OPENPOSE_ROS_MESSAGE_DETECTPEOPLERESPONSE_H
#define OPENPOSE_ROS_MESSAGE_DETECTPEOPLERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <openpose_ros/PersonDetection.h>

namespace openpose_ros
{
template <class ContainerAllocator>
struct DetectPeopleResponse_
{
  typedef DetectPeopleResponse_<ContainerAllocator> Type;

  DetectPeopleResponse_()
    : people_list()  {
    }
  DetectPeopleResponse_(const ContainerAllocator& _alloc)
    : people_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::openpose_ros::PersonDetection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::openpose_ros::PersonDetection_<ContainerAllocator> >::other >  _people_list_type;
  _people_list_type people_list;




  typedef boost::shared_ptr< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DetectPeopleResponse_

typedef ::openpose_ros::DetectPeopleResponse_<std::allocator<void> > DetectPeopleResponse;

typedef boost::shared_ptr< ::openpose_ros::DetectPeopleResponse > DetectPeopleResponsePtr;
typedef boost::shared_ptr< ::openpose_ros::DetectPeopleResponse const> DetectPeopleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace openpose_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'openpose_ros': ['/home/johannes/robocup/catkin_ws_openpose/src/openpose_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9061c1888cb3379ce3b5278d009dde5";
  }

  static const char* value(const ::openpose_ros::DetectPeopleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9061c1888cb3379ULL;
  static const uint64_t static_value2 = 0xce3b5278d009dde5ULL;
};

template<class ContainerAllocator>
struct DataType< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openpose_ros/DetectPeopleResponse";
  }

  static const char* value(const ::openpose_ros::DetectPeopleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PersonDetection[] people_list\n\
\n\
\n\
================================================================================\n\
MSG: openpose_ros/PersonDetection\n\
BodyPartDetection Nose\n\
BodyPartDetection Neck\n\
BodyPartDetection RShoulder\n\
BodyPartDetection RElbow\n\
BodyPartDetection RWrist\n\
BodyPartDetection LShoulder\n\
BodyPartDetection LElbow\n\
BodyPartDetection LWrist\n\
BodyPartDetection RHip\n\
BodyPartDetection RKnee\n\
BodyPartDetection RAnkle\n\
BodyPartDetection LHip\n\
BodyPartDetection LKnee\n\
BodyPartDetection LAnkle\n\
BodyPartDetection REye\n\
BodyPartDetection LEye\n\
BodyPartDetection REar\n\
BodyPartDetection LEar\n\
BodyPartDetection Chest\n\
\n\
================================================================================\n\
MSG: openpose_ros/BodyPartDetection\n\
geometry_msgs/Point pos\n\
float32 confidence\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::openpose_ros::DetectPeopleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.people_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectPeopleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openpose_ros::DetectPeopleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openpose_ros::DetectPeopleResponse_<ContainerAllocator>& v)
  {
    s << indent << "people_list[]" << std::endl;
    for (size_t i = 0; i < v.people_list.size(); ++i)
    {
      s << indent << "  people_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::openpose_ros::PersonDetection_<ContainerAllocator> >::stream(s, indent + "    ", v.people_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENPOSE_ROS_MESSAGE_DETECTPEOPLERESPONSE_H
