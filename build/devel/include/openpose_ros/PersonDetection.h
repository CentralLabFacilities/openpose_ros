// Generated by gencpp from file openpose_ros/PersonDetection.msg
// DO NOT EDIT!


#ifndef OPENPOSE_ROS_MESSAGE_PERSONDETECTION_H
#define OPENPOSE_ROS_MESSAGE_PERSONDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>
#include <openpose_ros/BodyPartDetection.h>

namespace openpose_ros
{
template <class ContainerAllocator>
struct PersonDetection_
{
  typedef PersonDetection_<ContainerAllocator> Type;

  PersonDetection_()
    : Nose()
    , Neck()
    , RShoulder()
    , RElbow()
    , RWrist()
    , LShoulder()
    , LElbow()
    , LWrist()
    , RHip()
    , RKnee()
    , RAnkle()
    , LHip()
    , LKnee()
    , LAnkle()
    , REye()
    , LEye()
    , REar()
    , LEar()
    , Chest()  {
    }
  PersonDetection_(const ContainerAllocator& _alloc)
    : Nose(_alloc)
    , Neck(_alloc)
    , RShoulder(_alloc)
    , RElbow(_alloc)
    , RWrist(_alloc)
    , LShoulder(_alloc)
    , LElbow(_alloc)
    , LWrist(_alloc)
    , RHip(_alloc)
    , RKnee(_alloc)
    , RAnkle(_alloc)
    , LHip(_alloc)
    , LKnee(_alloc)
    , LAnkle(_alloc)
    , REye(_alloc)
    , LEye(_alloc)
    , REar(_alloc)
    , LEar(_alloc)
    , Chest(_alloc)  {
  (void)_alloc;
    }



   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _Nose_type;
  _Nose_type Nose;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _Neck_type;
  _Neck_type Neck;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _RShoulder_type;
  _RShoulder_type RShoulder;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _RElbow_type;
  _RElbow_type RElbow;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _RWrist_type;
  _RWrist_type RWrist;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _LShoulder_type;
  _LShoulder_type LShoulder;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _LElbow_type;
  _LElbow_type LElbow;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _LWrist_type;
  _LWrist_type LWrist;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _RHip_type;
  _RHip_type RHip;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _RKnee_type;
  _RKnee_type RKnee;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _RAnkle_type;
  _RAnkle_type RAnkle;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _LHip_type;
  _LHip_type LHip;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _LKnee_type;
  _LKnee_type LKnee;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _LAnkle_type;
  _LAnkle_type LAnkle;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _REye_type;
  _REye_type REye;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _LEye_type;
  _LEye_type LEye;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _REar_type;
  _REar_type REar;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _LEar_type;
  _LEar_type LEar;

   typedef  ::openpose_ros::BodyPartDetection_<ContainerAllocator>  _Chest_type;
  _Chest_type Chest;




  typedef boost::shared_ptr< ::openpose_ros::PersonDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openpose_ros::PersonDetection_<ContainerAllocator> const> ConstPtr;

}; // struct PersonDetection_

typedef ::openpose_ros::PersonDetection_<std::allocator<void> > PersonDetection;

typedef boost::shared_ptr< ::openpose_ros::PersonDetection > PersonDetectionPtr;
typedef boost::shared_ptr< ::openpose_ros::PersonDetection const> PersonDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openpose_ros::PersonDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openpose_ros::PersonDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace openpose_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'openpose_ros': ['/home/johannes/robocup/catkin_ws_openpose/src/openpose_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::openpose_ros::PersonDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openpose_ros::PersonDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openpose_ros::PersonDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openpose_ros::PersonDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openpose_ros::PersonDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openpose_ros::PersonDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openpose_ros::PersonDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a992f141e745a3f47d598e0bc953d79";
  }

  static const char* value(const ::openpose_ros::PersonDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a992f141e745a3fULL;
  static const uint64_t static_value2 = 0x47d598e0bc953d79ULL;
};

template<class ContainerAllocator>
struct DataType< ::openpose_ros::PersonDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openpose_ros/PersonDetection";
  }

  static const char* value(const ::openpose_ros::PersonDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openpose_ros::PersonDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BodyPartDetection Nose\n\
BodyPartDetection Neck\n\
BodyPartDetection RShoulder\n\
BodyPartDetection RElbow\n\
BodyPartDetection RWrist\n\
BodyPartDetection LShoulder\n\
BodyPartDetection LElbow\n\
BodyPartDetection LWrist\n\
BodyPartDetection RHip\n\
BodyPartDetection RKnee\n\
BodyPartDetection RAnkle\n\
BodyPartDetection LHip\n\
BodyPartDetection LKnee\n\
BodyPartDetection LAnkle\n\
BodyPartDetection REye\n\
BodyPartDetection LEye\n\
BodyPartDetection REar\n\
BodyPartDetection LEar\n\
BodyPartDetection Chest\n\
\n\
================================================================================\n\
MSG: openpose_ros/BodyPartDetection\n\
geometry_msgs/Point pos\n\
float32 confidence\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::openpose_ros::PersonDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openpose_ros::PersonDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Nose);
      stream.next(m.Neck);
      stream.next(m.RShoulder);
      stream.next(m.RElbow);
      stream.next(m.RWrist);
      stream.next(m.LShoulder);
      stream.next(m.LElbow);
      stream.next(m.LWrist);
      stream.next(m.RHip);
      stream.next(m.RKnee);
      stream.next(m.RAnkle);
      stream.next(m.LHip);
      stream.next(m.LKnee);
      stream.next(m.LAnkle);
      stream.next(m.REye);
      stream.next(m.LEye);
      stream.next(m.REar);
      stream.next(m.LEar);
      stream.next(m.Chest);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PersonDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openpose_ros::PersonDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openpose_ros::PersonDetection_<ContainerAllocator>& v)
  {
    s << indent << "Nose: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.Nose);
    s << indent << "Neck: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.Neck);
    s << indent << "RShoulder: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.RShoulder);
    s << indent << "RElbow: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.RElbow);
    s << indent << "RWrist: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.RWrist);
    s << indent << "LShoulder: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.LShoulder);
    s << indent << "LElbow: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.LElbow);
    s << indent << "LWrist: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.LWrist);
    s << indent << "RHip: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.RHip);
    s << indent << "RKnee: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.RKnee);
    s << indent << "RAnkle: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.RAnkle);
    s << indent << "LHip: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.LHip);
    s << indent << "LKnee: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.LKnee);
    s << indent << "LAnkle: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.LAnkle);
    s << indent << "REye: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.REye);
    s << indent << "LEye: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.LEye);
    s << indent << "REar: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.REar);
    s << indent << "LEar: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.LEar);
    s << indent << "Chest: ";
    s << std::endl;
    Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, indent + "  ", v.Chest);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENPOSE_ROS_MESSAGE_PERSONDETECTION_H
