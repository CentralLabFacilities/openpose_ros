// Generated by gencpp from file openpose_ros/BodyPartDetection.msg
// DO NOT EDIT!


#ifndef OPENPOSE_ROS_MESSAGE_BODYPARTDETECTION_H
#define OPENPOSE_ROS_MESSAGE_BODYPARTDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace openpose_ros
{
template <class ContainerAllocator>
struct BodyPartDetection_
{
  typedef BodyPartDetection_<ContainerAllocator> Type;

  BodyPartDetection_()
    : pos()
    , confidence(0.0)  {
    }
  BodyPartDetection_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef float _confidence_type;
  _confidence_type confidence;




  typedef boost::shared_ptr< ::openpose_ros::BodyPartDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openpose_ros::BodyPartDetection_<ContainerAllocator> const> ConstPtr;

}; // struct BodyPartDetection_

typedef ::openpose_ros::BodyPartDetection_<std::allocator<void> > BodyPartDetection;

typedef boost::shared_ptr< ::openpose_ros::BodyPartDetection > BodyPartDetectionPtr;
typedef boost::shared_ptr< ::openpose_ros::BodyPartDetection const> BodyPartDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openpose_ros::BodyPartDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace openpose_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'openpose_ros': ['/home/johannes/robocup/catkin_ws_openpose/src/openpose_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openpose_ros::BodyPartDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openpose_ros::BodyPartDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openpose_ros::BodyPartDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d353c81ba0c136c3c45ae3297a81d8f3";
  }

  static const char* value(const ::openpose_ros::BodyPartDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd353c81ba0c136c3ULL;
  static const uint64_t static_value2 = 0xc45ae3297a81d8f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openpose_ros/BodyPartDetection";
  }

  static const char* value(const ::openpose_ros::BodyPartDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point pos\n\
float32 confidence\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::openpose_ros::BodyPartDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyPartDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openpose_ros::BodyPartDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openpose_ros::BodyPartDetection_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENPOSE_ROS_MESSAGE_BODYPARTDETECTION_H
