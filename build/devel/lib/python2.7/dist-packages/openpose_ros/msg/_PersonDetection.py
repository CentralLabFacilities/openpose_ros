# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from openpose_ros/PersonDetection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import openpose_ros.msg
import geometry_msgs.msg

class PersonDetection(genpy.Message):
  _md5sum = "3a992f141e745a3f47d598e0bc953d79"
  _type = "openpose_ros/PersonDetection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """BodyPartDetection Nose
BodyPartDetection Neck
BodyPartDetection RShoulder
BodyPartDetection RElbow
BodyPartDetection RWrist
BodyPartDetection LShoulder
BodyPartDetection LElbow
BodyPartDetection LWrist
BodyPartDetection RHip
BodyPartDetection RKnee
BodyPartDetection RAnkle
BodyPartDetection LHip
BodyPartDetection LKnee
BodyPartDetection LAnkle
BodyPartDetection REye
BodyPartDetection LEye
BodyPartDetection REar
BodyPartDetection LEar
BodyPartDetection Chest

================================================================================
MSG: openpose_ros/BodyPartDetection
geometry_msgs/Point pos
float32 confidence

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['Nose','Neck','RShoulder','RElbow','RWrist','LShoulder','LElbow','LWrist','RHip','RKnee','RAnkle','LHip','LKnee','LAnkle','REye','LEye','REar','LEar','Chest']
  _slot_types = ['openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection','openpose_ros/BodyPartDetection']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Nose,Neck,RShoulder,RElbow,RWrist,LShoulder,LElbow,LWrist,RHip,RKnee,RAnkle,LHip,LKnee,LAnkle,REye,LEye,REar,LEar,Chest

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PersonDetection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Nose is None:
        self.Nose = openpose_ros.msg.BodyPartDetection()
      if self.Neck is None:
        self.Neck = openpose_ros.msg.BodyPartDetection()
      if self.RShoulder is None:
        self.RShoulder = openpose_ros.msg.BodyPartDetection()
      if self.RElbow is None:
        self.RElbow = openpose_ros.msg.BodyPartDetection()
      if self.RWrist is None:
        self.RWrist = openpose_ros.msg.BodyPartDetection()
      if self.LShoulder is None:
        self.LShoulder = openpose_ros.msg.BodyPartDetection()
      if self.LElbow is None:
        self.LElbow = openpose_ros.msg.BodyPartDetection()
      if self.LWrist is None:
        self.LWrist = openpose_ros.msg.BodyPartDetection()
      if self.RHip is None:
        self.RHip = openpose_ros.msg.BodyPartDetection()
      if self.RKnee is None:
        self.RKnee = openpose_ros.msg.BodyPartDetection()
      if self.RAnkle is None:
        self.RAnkle = openpose_ros.msg.BodyPartDetection()
      if self.LHip is None:
        self.LHip = openpose_ros.msg.BodyPartDetection()
      if self.LKnee is None:
        self.LKnee = openpose_ros.msg.BodyPartDetection()
      if self.LAnkle is None:
        self.LAnkle = openpose_ros.msg.BodyPartDetection()
      if self.REye is None:
        self.REye = openpose_ros.msg.BodyPartDetection()
      if self.LEye is None:
        self.LEye = openpose_ros.msg.BodyPartDetection()
      if self.REar is None:
        self.REar = openpose_ros.msg.BodyPartDetection()
      if self.LEar is None:
        self.LEar = openpose_ros.msg.BodyPartDetection()
      if self.Chest is None:
        self.Chest = openpose_ros.msg.BodyPartDetection()
    else:
      self.Nose = openpose_ros.msg.BodyPartDetection()
      self.Neck = openpose_ros.msg.BodyPartDetection()
      self.RShoulder = openpose_ros.msg.BodyPartDetection()
      self.RElbow = openpose_ros.msg.BodyPartDetection()
      self.RWrist = openpose_ros.msg.BodyPartDetection()
      self.LShoulder = openpose_ros.msg.BodyPartDetection()
      self.LElbow = openpose_ros.msg.BodyPartDetection()
      self.LWrist = openpose_ros.msg.BodyPartDetection()
      self.RHip = openpose_ros.msg.BodyPartDetection()
      self.RKnee = openpose_ros.msg.BodyPartDetection()
      self.RAnkle = openpose_ros.msg.BodyPartDetection()
      self.LHip = openpose_ros.msg.BodyPartDetection()
      self.LKnee = openpose_ros.msg.BodyPartDetection()
      self.LAnkle = openpose_ros.msg.BodyPartDetection()
      self.REye = openpose_ros.msg.BodyPartDetection()
      self.LEye = openpose_ros.msg.BodyPartDetection()
      self.REar = openpose_ros.msg.BodyPartDetection()
      self.LEar = openpose_ros.msg.BodyPartDetection()
      self.Chest = openpose_ros.msg.BodyPartDetection()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df().pack(_x.Nose.pos.x, _x.Nose.pos.y, _x.Nose.pos.z, _x.Nose.confidence, _x.Neck.pos.x, _x.Neck.pos.y, _x.Neck.pos.z, _x.Neck.confidence, _x.RShoulder.pos.x, _x.RShoulder.pos.y, _x.RShoulder.pos.z, _x.RShoulder.confidence, _x.RElbow.pos.x, _x.RElbow.pos.y, _x.RElbow.pos.z, _x.RElbow.confidence, _x.RWrist.pos.x, _x.RWrist.pos.y, _x.RWrist.pos.z, _x.RWrist.confidence, _x.LShoulder.pos.x, _x.LShoulder.pos.y, _x.LShoulder.pos.z, _x.LShoulder.confidence, _x.LElbow.pos.x, _x.LElbow.pos.y, _x.LElbow.pos.z, _x.LElbow.confidence, _x.LWrist.pos.x, _x.LWrist.pos.y, _x.LWrist.pos.z, _x.LWrist.confidence, _x.RHip.pos.x, _x.RHip.pos.y, _x.RHip.pos.z, _x.RHip.confidence, _x.RKnee.pos.x, _x.RKnee.pos.y, _x.RKnee.pos.z, _x.RKnee.confidence, _x.RAnkle.pos.x, _x.RAnkle.pos.y, _x.RAnkle.pos.z, _x.RAnkle.confidence, _x.LHip.pos.x, _x.LHip.pos.y, _x.LHip.pos.z, _x.LHip.confidence, _x.LKnee.pos.x, _x.LKnee.pos.y, _x.LKnee.pos.z, _x.LKnee.confidence, _x.LAnkle.pos.x, _x.LAnkle.pos.y, _x.LAnkle.pos.z, _x.LAnkle.confidence, _x.REye.pos.x, _x.REye.pos.y, _x.REye.pos.z, _x.REye.confidence, _x.LEye.pos.x, _x.LEye.pos.y, _x.LEye.pos.z, _x.LEye.confidence, _x.REar.pos.x, _x.REar.pos.y, _x.REar.pos.z, _x.REar.confidence, _x.LEar.pos.x, _x.LEar.pos.y, _x.LEar.pos.z, _x.LEar.confidence, _x.Chest.pos.x, _x.Chest.pos.y, _x.Chest.pos.z, _x.Chest.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Nose is None:
        self.Nose = openpose_ros.msg.BodyPartDetection()
      if self.Neck is None:
        self.Neck = openpose_ros.msg.BodyPartDetection()
      if self.RShoulder is None:
        self.RShoulder = openpose_ros.msg.BodyPartDetection()
      if self.RElbow is None:
        self.RElbow = openpose_ros.msg.BodyPartDetection()
      if self.RWrist is None:
        self.RWrist = openpose_ros.msg.BodyPartDetection()
      if self.LShoulder is None:
        self.LShoulder = openpose_ros.msg.BodyPartDetection()
      if self.LElbow is None:
        self.LElbow = openpose_ros.msg.BodyPartDetection()
      if self.LWrist is None:
        self.LWrist = openpose_ros.msg.BodyPartDetection()
      if self.RHip is None:
        self.RHip = openpose_ros.msg.BodyPartDetection()
      if self.RKnee is None:
        self.RKnee = openpose_ros.msg.BodyPartDetection()
      if self.RAnkle is None:
        self.RAnkle = openpose_ros.msg.BodyPartDetection()
      if self.LHip is None:
        self.LHip = openpose_ros.msg.BodyPartDetection()
      if self.LKnee is None:
        self.LKnee = openpose_ros.msg.BodyPartDetection()
      if self.LAnkle is None:
        self.LAnkle = openpose_ros.msg.BodyPartDetection()
      if self.REye is None:
        self.REye = openpose_ros.msg.BodyPartDetection()
      if self.LEye is None:
        self.LEye = openpose_ros.msg.BodyPartDetection()
      if self.REar is None:
        self.REar = openpose_ros.msg.BodyPartDetection()
      if self.LEar is None:
        self.LEar = openpose_ros.msg.BodyPartDetection()
      if self.Chest is None:
        self.Chest = openpose_ros.msg.BodyPartDetection()
      end = 0
      _x = self
      start = end
      end += 532
      (_x.Nose.pos.x, _x.Nose.pos.y, _x.Nose.pos.z, _x.Nose.confidence, _x.Neck.pos.x, _x.Neck.pos.y, _x.Neck.pos.z, _x.Neck.confidence, _x.RShoulder.pos.x, _x.RShoulder.pos.y, _x.RShoulder.pos.z, _x.RShoulder.confidence, _x.RElbow.pos.x, _x.RElbow.pos.y, _x.RElbow.pos.z, _x.RElbow.confidence, _x.RWrist.pos.x, _x.RWrist.pos.y, _x.RWrist.pos.z, _x.RWrist.confidence, _x.LShoulder.pos.x, _x.LShoulder.pos.y, _x.LShoulder.pos.z, _x.LShoulder.confidence, _x.LElbow.pos.x, _x.LElbow.pos.y, _x.LElbow.pos.z, _x.LElbow.confidence, _x.LWrist.pos.x, _x.LWrist.pos.y, _x.LWrist.pos.z, _x.LWrist.confidence, _x.RHip.pos.x, _x.RHip.pos.y, _x.RHip.pos.z, _x.RHip.confidence, _x.RKnee.pos.x, _x.RKnee.pos.y, _x.RKnee.pos.z, _x.RKnee.confidence, _x.RAnkle.pos.x, _x.RAnkle.pos.y, _x.RAnkle.pos.z, _x.RAnkle.confidence, _x.LHip.pos.x, _x.LHip.pos.y, _x.LHip.pos.z, _x.LHip.confidence, _x.LKnee.pos.x, _x.LKnee.pos.y, _x.LKnee.pos.z, _x.LKnee.confidence, _x.LAnkle.pos.x, _x.LAnkle.pos.y, _x.LAnkle.pos.z, _x.LAnkle.confidence, _x.REye.pos.x, _x.REye.pos.y, _x.REye.pos.z, _x.REye.confidence, _x.LEye.pos.x, _x.LEye.pos.y, _x.LEye.pos.z, _x.LEye.confidence, _x.REar.pos.x, _x.REar.pos.y, _x.REar.pos.z, _x.REar.confidence, _x.LEar.pos.x, _x.LEar.pos.y, _x.LEar.pos.z, _x.LEar.confidence, _x.Chest.pos.x, _x.Chest.pos.y, _x.Chest.pos.z, _x.Chest.confidence,) = _get_struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df().pack(_x.Nose.pos.x, _x.Nose.pos.y, _x.Nose.pos.z, _x.Nose.confidence, _x.Neck.pos.x, _x.Neck.pos.y, _x.Neck.pos.z, _x.Neck.confidence, _x.RShoulder.pos.x, _x.RShoulder.pos.y, _x.RShoulder.pos.z, _x.RShoulder.confidence, _x.RElbow.pos.x, _x.RElbow.pos.y, _x.RElbow.pos.z, _x.RElbow.confidence, _x.RWrist.pos.x, _x.RWrist.pos.y, _x.RWrist.pos.z, _x.RWrist.confidence, _x.LShoulder.pos.x, _x.LShoulder.pos.y, _x.LShoulder.pos.z, _x.LShoulder.confidence, _x.LElbow.pos.x, _x.LElbow.pos.y, _x.LElbow.pos.z, _x.LElbow.confidence, _x.LWrist.pos.x, _x.LWrist.pos.y, _x.LWrist.pos.z, _x.LWrist.confidence, _x.RHip.pos.x, _x.RHip.pos.y, _x.RHip.pos.z, _x.RHip.confidence, _x.RKnee.pos.x, _x.RKnee.pos.y, _x.RKnee.pos.z, _x.RKnee.confidence, _x.RAnkle.pos.x, _x.RAnkle.pos.y, _x.RAnkle.pos.z, _x.RAnkle.confidence, _x.LHip.pos.x, _x.LHip.pos.y, _x.LHip.pos.z, _x.LHip.confidence, _x.LKnee.pos.x, _x.LKnee.pos.y, _x.LKnee.pos.z, _x.LKnee.confidence, _x.LAnkle.pos.x, _x.LAnkle.pos.y, _x.LAnkle.pos.z, _x.LAnkle.confidence, _x.REye.pos.x, _x.REye.pos.y, _x.REye.pos.z, _x.REye.confidence, _x.LEye.pos.x, _x.LEye.pos.y, _x.LEye.pos.z, _x.LEye.confidence, _x.REar.pos.x, _x.REar.pos.y, _x.REar.pos.z, _x.REar.confidence, _x.LEar.pos.x, _x.LEar.pos.y, _x.LEar.pos.z, _x.LEar.confidence, _x.Chest.pos.x, _x.Chest.pos.y, _x.Chest.pos.z, _x.Chest.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Nose is None:
        self.Nose = openpose_ros.msg.BodyPartDetection()
      if self.Neck is None:
        self.Neck = openpose_ros.msg.BodyPartDetection()
      if self.RShoulder is None:
        self.RShoulder = openpose_ros.msg.BodyPartDetection()
      if self.RElbow is None:
        self.RElbow = openpose_ros.msg.BodyPartDetection()
      if self.RWrist is None:
        self.RWrist = openpose_ros.msg.BodyPartDetection()
      if self.LShoulder is None:
        self.LShoulder = openpose_ros.msg.BodyPartDetection()
      if self.LElbow is None:
        self.LElbow = openpose_ros.msg.BodyPartDetection()
      if self.LWrist is None:
        self.LWrist = openpose_ros.msg.BodyPartDetection()
      if self.RHip is None:
        self.RHip = openpose_ros.msg.BodyPartDetection()
      if self.RKnee is None:
        self.RKnee = openpose_ros.msg.BodyPartDetection()
      if self.RAnkle is None:
        self.RAnkle = openpose_ros.msg.BodyPartDetection()
      if self.LHip is None:
        self.LHip = openpose_ros.msg.BodyPartDetection()
      if self.LKnee is None:
        self.LKnee = openpose_ros.msg.BodyPartDetection()
      if self.LAnkle is None:
        self.LAnkle = openpose_ros.msg.BodyPartDetection()
      if self.REye is None:
        self.REye = openpose_ros.msg.BodyPartDetection()
      if self.LEye is None:
        self.LEye = openpose_ros.msg.BodyPartDetection()
      if self.REar is None:
        self.REar = openpose_ros.msg.BodyPartDetection()
      if self.LEar is None:
        self.LEar = openpose_ros.msg.BodyPartDetection()
      if self.Chest is None:
        self.Chest = openpose_ros.msg.BodyPartDetection()
      end = 0
      _x = self
      start = end
      end += 532
      (_x.Nose.pos.x, _x.Nose.pos.y, _x.Nose.pos.z, _x.Nose.confidence, _x.Neck.pos.x, _x.Neck.pos.y, _x.Neck.pos.z, _x.Neck.confidence, _x.RShoulder.pos.x, _x.RShoulder.pos.y, _x.RShoulder.pos.z, _x.RShoulder.confidence, _x.RElbow.pos.x, _x.RElbow.pos.y, _x.RElbow.pos.z, _x.RElbow.confidence, _x.RWrist.pos.x, _x.RWrist.pos.y, _x.RWrist.pos.z, _x.RWrist.confidence, _x.LShoulder.pos.x, _x.LShoulder.pos.y, _x.LShoulder.pos.z, _x.LShoulder.confidence, _x.LElbow.pos.x, _x.LElbow.pos.y, _x.LElbow.pos.z, _x.LElbow.confidence, _x.LWrist.pos.x, _x.LWrist.pos.y, _x.LWrist.pos.z, _x.LWrist.confidence, _x.RHip.pos.x, _x.RHip.pos.y, _x.RHip.pos.z, _x.RHip.confidence, _x.RKnee.pos.x, _x.RKnee.pos.y, _x.RKnee.pos.z, _x.RKnee.confidence, _x.RAnkle.pos.x, _x.RAnkle.pos.y, _x.RAnkle.pos.z, _x.RAnkle.confidence, _x.LHip.pos.x, _x.LHip.pos.y, _x.LHip.pos.z, _x.LHip.confidence, _x.LKnee.pos.x, _x.LKnee.pos.y, _x.LKnee.pos.z, _x.LKnee.confidence, _x.LAnkle.pos.x, _x.LAnkle.pos.y, _x.LAnkle.pos.z, _x.LAnkle.confidence, _x.REye.pos.x, _x.REye.pos.y, _x.REye.pos.z, _x.REye.confidence, _x.LEye.pos.x, _x.LEye.pos.y, _x.LEye.pos.z, _x.LEye.confidence, _x.REar.pos.x, _x.REar.pos.y, _x.REar.pos.z, _x.REar.confidence, _x.LEar.pos.x, _x.LEar.pos.y, _x.LEar.pos.z, _x.LEar.confidence, _x.Chest.pos.x, _x.Chest.pos.y, _x.Chest.pos.z, _x.Chest.confidence,) = _get_struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df = None
def _get_struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df():
    global _struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df
    if _struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df is None:
        _struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df = struct.Struct("<3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df")
    return _struct_3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df
