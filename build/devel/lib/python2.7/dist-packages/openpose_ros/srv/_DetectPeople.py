# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from openpose_ros/DetectPeopleRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DetectPeopleRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "openpose_ros/DetectPeopleRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectPeopleRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from openpose_ros/DetectPeopleResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import openpose_ros.msg
import geometry_msgs.msg

class DetectPeopleResponse(genpy.Message):
  _md5sum = "f9061c1888cb3379ce3b5278d009dde5"
  _type = "openpose_ros/DetectPeopleResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """PersonDetection[] people_list


================================================================================
MSG: openpose_ros/PersonDetection
BodyPartDetection Nose
BodyPartDetection Neck
BodyPartDetection RShoulder
BodyPartDetection RElbow
BodyPartDetection RWrist
BodyPartDetection LShoulder
BodyPartDetection LElbow
BodyPartDetection LWrist
BodyPartDetection RHip
BodyPartDetection RKnee
BodyPartDetection RAnkle
BodyPartDetection LHip
BodyPartDetection LKnee
BodyPartDetection LAnkle
BodyPartDetection REye
BodyPartDetection LEye
BodyPartDetection REar
BodyPartDetection LEar
BodyPartDetection Chest

================================================================================
MSG: openpose_ros/BodyPartDetection
geometry_msgs/Point pos
float32 confidence

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['people_list']
  _slot_types = ['openpose_ros/PersonDetection[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       people_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectPeopleResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.people_list is None:
        self.people_list = []
    else:
      self.people_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.people_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.people_list:
        _v1 = val1.Nose
        _v2 = _v1.pos
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v1.confidence))
        _v3 = val1.Neck
        _v4 = _v3.pos
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v3.confidence))
        _v5 = val1.RShoulder
        _v6 = _v5.pos
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v5.confidence))
        _v7 = val1.RElbow
        _v8 = _v7.pos
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v7.confidence))
        _v9 = val1.RWrist
        _v10 = _v9.pos
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v9.confidence))
        _v11 = val1.LShoulder
        _v12 = _v11.pos
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v11.confidence))
        _v13 = val1.LElbow
        _v14 = _v13.pos
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v13.confidence))
        _v15 = val1.LWrist
        _v16 = _v15.pos
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v15.confidence))
        _v17 = val1.RHip
        _v18 = _v17.pos
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v17.confidence))
        _v19 = val1.RKnee
        _v20 = _v19.pos
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v19.confidence))
        _v21 = val1.RAnkle
        _v22 = _v21.pos
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v21.confidence))
        _v23 = val1.LHip
        _v24 = _v23.pos
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v23.confidence))
        _v25 = val1.LKnee
        _v26 = _v25.pos
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v25.confidence))
        _v27 = val1.LAnkle
        _v28 = _v27.pos
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v27.confidence))
        _v29 = val1.REye
        _v30 = _v29.pos
        _x = _v30
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v29.confidence))
        _v31 = val1.LEye
        _v32 = _v31.pos
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v31.confidence))
        _v33 = val1.REar
        _v34 = _v33.pos
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v33.confidence))
        _v35 = val1.LEar
        _v36 = _v35.pos
        _x = _v36
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v35.confidence))
        _v37 = val1.Chest
        _v38 = _v37.pos
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v37.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.people_list is None:
        self.people_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.people_list = []
      for i in range(0, length):
        val1 = openpose_ros.msg.PersonDetection()
        _v39 = val1.Nose
        _v40 = _v39.pos
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v39.confidence,) = _get_struct_f().unpack(str[start:end])
        _v41 = val1.Neck
        _v42 = _v41.pos
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v41.confidence,) = _get_struct_f().unpack(str[start:end])
        _v43 = val1.RShoulder
        _v44 = _v43.pos
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v43.confidence,) = _get_struct_f().unpack(str[start:end])
        _v45 = val1.RElbow
        _v46 = _v45.pos
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v45.confidence,) = _get_struct_f().unpack(str[start:end])
        _v47 = val1.RWrist
        _v48 = _v47.pos
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v47.confidence,) = _get_struct_f().unpack(str[start:end])
        _v49 = val1.LShoulder
        _v50 = _v49.pos
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v49.confidence,) = _get_struct_f().unpack(str[start:end])
        _v51 = val1.LElbow
        _v52 = _v51.pos
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v51.confidence,) = _get_struct_f().unpack(str[start:end])
        _v53 = val1.LWrist
        _v54 = _v53.pos
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v53.confidence,) = _get_struct_f().unpack(str[start:end])
        _v55 = val1.RHip
        _v56 = _v55.pos
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v55.confidence,) = _get_struct_f().unpack(str[start:end])
        _v57 = val1.RKnee
        _v58 = _v57.pos
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v57.confidence,) = _get_struct_f().unpack(str[start:end])
        _v59 = val1.RAnkle
        _v60 = _v59.pos
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v59.confidence,) = _get_struct_f().unpack(str[start:end])
        _v61 = val1.LHip
        _v62 = _v61.pos
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v61.confidence,) = _get_struct_f().unpack(str[start:end])
        _v63 = val1.LKnee
        _v64 = _v63.pos
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v63.confidence,) = _get_struct_f().unpack(str[start:end])
        _v65 = val1.LAnkle
        _v66 = _v65.pos
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v65.confidence,) = _get_struct_f().unpack(str[start:end])
        _v67 = val1.REye
        _v68 = _v67.pos
        _x = _v68
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v67.confidence,) = _get_struct_f().unpack(str[start:end])
        _v69 = val1.LEye
        _v70 = _v69.pos
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v69.confidence,) = _get_struct_f().unpack(str[start:end])
        _v71 = val1.REar
        _v72 = _v71.pos
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v71.confidence,) = _get_struct_f().unpack(str[start:end])
        _v73 = val1.LEar
        _v74 = _v73.pos
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v73.confidence,) = _get_struct_f().unpack(str[start:end])
        _v75 = val1.Chest
        _v76 = _v75.pos
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v75.confidence,) = _get_struct_f().unpack(str[start:end])
        self.people_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.people_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.people_list:
        _v77 = val1.Nose
        _v78 = _v77.pos
        _x = _v78
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v77.confidence))
        _v79 = val1.Neck
        _v80 = _v79.pos
        _x = _v80
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v79.confidence))
        _v81 = val1.RShoulder
        _v82 = _v81.pos
        _x = _v82
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v81.confidence))
        _v83 = val1.RElbow
        _v84 = _v83.pos
        _x = _v84
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v83.confidence))
        _v85 = val1.RWrist
        _v86 = _v85.pos
        _x = _v86
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v85.confidence))
        _v87 = val1.LShoulder
        _v88 = _v87.pos
        _x = _v88
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v87.confidence))
        _v89 = val1.LElbow
        _v90 = _v89.pos
        _x = _v90
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v89.confidence))
        _v91 = val1.LWrist
        _v92 = _v91.pos
        _x = _v92
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v91.confidence))
        _v93 = val1.RHip
        _v94 = _v93.pos
        _x = _v94
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v93.confidence))
        _v95 = val1.RKnee
        _v96 = _v95.pos
        _x = _v96
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v95.confidence))
        _v97 = val1.RAnkle
        _v98 = _v97.pos
        _x = _v98
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v97.confidence))
        _v99 = val1.LHip
        _v100 = _v99.pos
        _x = _v100
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v99.confidence))
        _v101 = val1.LKnee
        _v102 = _v101.pos
        _x = _v102
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v101.confidence))
        _v103 = val1.LAnkle
        _v104 = _v103.pos
        _x = _v104
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v103.confidence))
        _v105 = val1.REye
        _v106 = _v105.pos
        _x = _v106
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v105.confidence))
        _v107 = val1.LEye
        _v108 = _v107.pos
        _x = _v108
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v107.confidence))
        _v109 = val1.REar
        _v110 = _v109.pos
        _x = _v110
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v109.confidence))
        _v111 = val1.LEar
        _v112 = _v111.pos
        _x = _v112
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v111.confidence))
        _v113 = val1.Chest
        _v114 = _v113.pos
        _x = _v114
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(_v113.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.people_list is None:
        self.people_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.people_list = []
      for i in range(0, length):
        val1 = openpose_ros.msg.PersonDetection()
        _v115 = val1.Nose
        _v116 = _v115.pos
        _x = _v116
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v115.confidence,) = _get_struct_f().unpack(str[start:end])
        _v117 = val1.Neck
        _v118 = _v117.pos
        _x = _v118
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v117.confidence,) = _get_struct_f().unpack(str[start:end])
        _v119 = val1.RShoulder
        _v120 = _v119.pos
        _x = _v120
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v119.confidence,) = _get_struct_f().unpack(str[start:end])
        _v121 = val1.RElbow
        _v122 = _v121.pos
        _x = _v122
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v121.confidence,) = _get_struct_f().unpack(str[start:end])
        _v123 = val1.RWrist
        _v124 = _v123.pos
        _x = _v124
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v123.confidence,) = _get_struct_f().unpack(str[start:end])
        _v125 = val1.LShoulder
        _v126 = _v125.pos
        _x = _v126
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v125.confidence,) = _get_struct_f().unpack(str[start:end])
        _v127 = val1.LElbow
        _v128 = _v127.pos
        _x = _v128
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v127.confidence,) = _get_struct_f().unpack(str[start:end])
        _v129 = val1.LWrist
        _v130 = _v129.pos
        _x = _v130
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v129.confidence,) = _get_struct_f().unpack(str[start:end])
        _v131 = val1.RHip
        _v132 = _v131.pos
        _x = _v132
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v131.confidence,) = _get_struct_f().unpack(str[start:end])
        _v133 = val1.RKnee
        _v134 = _v133.pos
        _x = _v134
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v133.confidence,) = _get_struct_f().unpack(str[start:end])
        _v135 = val1.RAnkle
        _v136 = _v135.pos
        _x = _v136
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v135.confidence,) = _get_struct_f().unpack(str[start:end])
        _v137 = val1.LHip
        _v138 = _v137.pos
        _x = _v138
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v137.confidence,) = _get_struct_f().unpack(str[start:end])
        _v139 = val1.LKnee
        _v140 = _v139.pos
        _x = _v140
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v139.confidence,) = _get_struct_f().unpack(str[start:end])
        _v141 = val1.LAnkle
        _v142 = _v141.pos
        _x = _v142
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v141.confidence,) = _get_struct_f().unpack(str[start:end])
        _v143 = val1.REye
        _v144 = _v143.pos
        _x = _v144
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v143.confidence,) = _get_struct_f().unpack(str[start:end])
        _v145 = val1.LEye
        _v146 = _v145.pos
        _x = _v146
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v145.confidence,) = _get_struct_f().unpack(str[start:end])
        _v147 = val1.REar
        _v148 = _v147.pos
        _x = _v148
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v147.confidence,) = _get_struct_f().unpack(str[start:end])
        _v149 = val1.LEar
        _v150 = _v149.pos
        _x = _v150
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v149.confidence,) = _get_struct_f().unpack(str[start:end])
        _v151 = val1.Chest
        _v152 = _v151.pos
        _x = _v152
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v151.confidence,) = _get_struct_f().unpack(str[start:end])
        self.people_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class DetectPeople(object):
  _type          = 'openpose_ros/DetectPeople'
  _md5sum = 'f9061c1888cb3379ce3b5278d009dde5'
  _request_class  = DetectPeopleRequest
  _response_class = DetectPeopleResponse
